name: Changed files
on:
  push:
    branches: [ master ]
  pull_request:

jobs:
  changed-files:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get changed files
        if: inputs.branch == ''
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: |
            container/**
          dir_names: "true" # return only directory names
          separator: " " # multi-line output results in the error due to the new GITHUB OUTPUT variable
          dir_names_max_depth: 2 # return folder name in the format `container/<image-name>`

      - name: Print changed files
        run: |
          echo "${{ steps.changed-files.outputs.all_changed_files }}"

      - name: Image tags change
        run: |
          git diff $(git rev-parse HEAD~1) HEAD .image_tags

      - name: Unique names of changed images
        id: image-names
        run: |
          if [[ "${{ steps.changed-files.outputs.all_changed_files }}" ]]; then
            DIRS="${{ steps.changed-files.outputs.all_changed_files }}"
          else
            DIRS="${{ steps.changed-files-provided-branch.outputs.all_changed_files }}"
          fi
          IMAGES=""
          if [[ $DIRS ]]; then
            IMAGES=$(echo $DIRS | tr " " "\n" | cut -d "/" -f 2)
          fi
          
          echo "IMAGES=$IMAGES" 
          
          BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
          DEFAULT_BRANCH=$(git remote show origin | awk '/HEAD branch/ {print $NF}')
          if [ "$BRANCH_NAME" == "$DEFAULT_BRANCH" ]; then
            # master merge
            IMAGE_TAGS_FILE_CHANGES=$(git diff $(git rev-parse HEAD~1) HEAD .image_tags | grep '^+[^+]' | cut -c2- | awk -F= '{print $1}')
          else
            # pull request
            IMAGE_TAGS_FILE_CHANGES=$(git diff HEAD origin/$DEFAULT_BRANCH .image_tags | grep '^+[^+]' | cut -c2- | awk -F= '{print $1}')
          fi
          echo "IMAGE_TAGS_FILE_CHANGES=$IMAGE_TAGS_FILE_CHANGES"
          
          if [[ $IMAGE_TAGS_FILE_CHANGES ]]; then
            IMAGES="$IMAGES $IMAGE_TAGS_FILE_CHANGES"
          fi
          
          echo "FINAL_IMAGES=$IMAGES"
          
          if [[ $IMAGES ]]; then
            IMAGES=$(echo $IMAGES | tr " " "\n" | uniq | jq -Rnc '[inputs | {image:.}]')
            echo "images=$IMAGES" >> $GITHUB_OUTPUT
          else
            echo "images=[]" >> $GITHUB_OUTPUT
          fi
          
          echo $IMAGES
